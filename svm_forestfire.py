# -*- coding: utf-8 -*-
"""SVM Forestfire.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F9flM3TB1VsGelwtlvuMIKUs5vbsLVs6
"""

from google.colab import files

files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.svm import SVC
from sklearn.metrics import *

forestfire=pd.read_csv('forestfires.csv')
forestfire.head(5)

forestfire.isna().sum().sum()

forestfire.columns

forestfire.drop(["month","day"],axis=1,inplace=True)

x=forestfire.iloc[:,:-1]
y=forestfire.iloc[:,-1]

#Normalizing values
def norm_val(val):
  z=(val-val.min())/(val.max()-val.min())
  return(z)

x=norm_val(x)

forestfire["size_category"].value_counts()

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,stratify=y)

#Liner model
clf=SVC(kernel="linear")
clf.fit(x_train,y_train)
y_pred_lin=clf.predict(x_test)
acc=accuracy_score(y_test,y_pred_lin)*100
print('Accuracy = ',acc)
print('==='*20)
print(classification_report(y_test,y_pred_lin))

#model
model_poly=SVC(kernel="poly",gamma=10)
model_poly.fit(x_train,y_train)
y_pred_poly=model_poly.predict(x_test)
acc_poly=accuracy_score(y_test,y_pred_poly)*100
print("Accuracy=",acc_poly)
print("==="*20)
print(classification_report(y_test,y_pred_poly))

#Sigmoid
model_sig=SVC(kernel="sigmoid")
model_sig.fit(x_train,y_train)
y_pred_sig=model_sig.predict(x_test)
acc_sig=np.mean(y_pred_sig==y_test)
print("Accuracy=",acc_sig*100)
print("==="*20)
print(classification_report(y_test,y_pred_sig))

clf = SVC( gamma = 100,kernel="rbf")
clf.fit(x_train , y_train)
y_pred_train= clf.predict(x_train)
acc = accuracy_score(y_train, y_pred_train) * 100
print("Accuracy =", acc)

y_pred_test= clf.predict(x_test)
acc = accuracy_score(y_test, y_pred_test) * 100
print("Accuracy =", acc)

